image: node:latest

stages:
  - build
  - test

build_front_end:
  stage: build
  script:
    - cd front-end
    - npm install --save --legacy-peer-deps
    - CI=false npm run-script build

front_end_unit_test:
  stage: test
  script:
    - cd front-end
    - npm install --save --legacy-peer-deps
    - CI=true npm test

# Adapted from here https://nander.cc/using-selenium-within-a-docker-container
front_end_selenium_tests:
  stage: test
  image: python:3.9
  script:
    - cd front-end
    - pip install --upgrade pip
    - pip install --no-cache-dir selenium
    - apt-get update

    # Install chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
    - apt-get -y update
    - apt-get install -y google-chrome-stable

    # Get webdriver
    - apt-get install -yqq unzip
    - wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`/chromedriver_linux64.zip
    - unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/

    # Run the tests
    - python3 ./selenium/SeleniumTests.py

back_end_unit_tests:
  stage: test
  image: python:latest
  script:
    - cd back-end
    - apt-get clean && apt-get update
    - apt-get install -y python3
    - apt-get install -y python3-pip python3-dev build-essential vim
    - apt-get install -y default-libmysqlclient-dev libpq-dev postgresql
    - pip3 install --upgrade pip
    - pip3 install -r requirements.txt
    - pip install black
    - python tests.py

back_end_postman_tests:
  stage: test
  image:
    name: postman/newman:alpine
    entrypoint: [""]
  script:
    - newman --version
    - newman run SRN-postman.json
